Part C

1) https://leetcode.com/problems/longest-substring-without-repeating-characters/description/
2) https://leetcode.com/problems/zigzag-conversion/description/
3) https://leetcode.com/problems/3sum-closest/description/
4) https://leetcode.com/problems/generate-parentheses/description/
5) https://leetcode.com/problems/multiply-strings/description/
6) https://leetcode.com/problems/group-anagrams/description/
7) https://leetcode.com/problems/multiply-strings/description/
8) https://leetcode.com/problems/jump-game/description/
9) https://leetcode.com/problems/unique-paths/description/
10) https://leetcode.com/problems/text-justification/description/


1) LongestNoRepeatingSubstring:

class Solution(object):
    def lengthOfLongestSubstring(self, s):
        n = len(s)
        char_index = {}
        max_len = 0
        start = 0
    
        for end in range(n):
            if s[end] in char_index:
                start = max(start, char_index[s[end]] + 1)

            char_index[s[end]] = end
            max_len = max(max_len, end - start + 1)
    
        return max_len
_________________________________________________________

2) ZigZag Conversion

def convert(self, s, numRows):
        
        if numRows == 1:
            return s
        
        rows = [''] * numRows
        
        cur_row = 0
        down = False
        
        for char in s:
            if(cur_row == 0 or cur_row == numRows-1):
                down = not down
            
            rows[cur_row] += char
            if down:
                cur_row += 1
            else:
                cur_row -= 1
        
        return "".join(rows)

_________________________________________________________

3) Three sum closest

def threeSumClosest(self, nums, target):
        nums.sort()
        result = nums[0] + nums[1] + nums[2]
        n = len(nums)
        for i in range(n):
            j = i + 1
            k = n - 1
            while(j < k):
                sums = nums[i] + nums[j] + nums[k]
                if(sums < target):
                    j += 1
                else:
                    k -= 1
                
                if(abs(sums - target) < abs(result - target)):
                    result = sums
                
        return result

_________________________________________________________

4) generate parentheses:

 generatedparentheses = []
        
        def dfs(l: int, r: int, s: str) -> None:
            if(l == 0 and r == 0):
                #used up all the parentheses then append
                generatedparentheses.append(s)
            if(l > 0):
                dfs(l - 1, r, s + '(')
            if(l < r):
                dfs(l, r - 1, s + ')')
        
        s = ""
        dfs(n, n, s)
        return generatedparentheses

_________________________________________________________

5) Multipy strings: 

def multiply(self, num1: str, num2: str) -> str:
        s = [0] * (len(num1) + len(num2))

        for i in reversed(range(len(num1))):
          for j in reversed(range(len(num2))):
            mult = int(num1[i]) * int(num2[j])
            summ = mult + s[i + j + 1]
            s[i + j] += summ // 10
            s[i + j + 1] = summ % 10

        for i, c in enumerate(s):
          if c != 0:
            break

        return ''.join(map(str, s[i:]))

_________________________________________________________

6) Group anagrams

def groupAnagrams(self, arr: List[str]) -> List[List[str]]:
        ar = []
        map = defaultdict(list)
        for cur in arr:
            sorted_str = ''.join(sorted(cur))
            map[sorted_str].append(cur)

        ar.extend(map.values())
        return ar
_________________________________________________________

7) Multipy strings: 

def multiply(self, num1: str, num2: str) -> str:
        s = [0] * (len(num1) + len(num2))

        for i in reversed(range(len(num1))):
          for j in reversed(range(len(num2))):
            mult = int(num1[i]) * int(num2[j])
            summ = mult + s[i + j + 1]
            s[i + j] += summ // 10
            s[i + j + 1] = summ % 10

        for i, c in enumerate(s):
          if c != 0:
            break

        return ''.join(map(str, s[i:]))
_________________________________________________________

8) jump game
def canJump(self, nums: List[int]) -> bool:
        n = len(nums)
        max_reachable = 0
        n = len(nums)

        for i in range(n):
            if i > max_reachable:
                return False
            max_reachable = max(max_reachable, i + nums[i])
            if max_reachable >= n - 1:
                return True

        return False

_________________________________________________________

9)  unique paths:

def uniquePaths(self, m: int, n: int) -> int:
        dp = [[1] * n for _ in range(m)]
    
    # Iterate over the array starting from (1, 1) since the first row and column are already 1
        for i in range(1, m):
            for j in range(1, n):
                # The number of ways to reach (i, j) is the sum of ways to reach (i-1, j) and (i, j-1)
                dp[i][j] = dp[i-1][j] + dp[i][j-1]

        # The bottom-right corner will have the answer
        return dp[m-1][n-1]
_________________________________________________________

10) text justification

def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:
        result = []
        current_line = []
        current_length = 0

        for word in words:
            # Check if we can add this word to the current line
            if current_length + len(current_line) + len(word) > maxWidth:
                # Calculate number of spaces to distribute
                num_spaces = maxWidth - current_length
                if len(current_line) == 1:
                    # Only one word in the line, all spaces go after it
                    result.append(current_line[0] + ' ' * num_spaces)
                else:
                    # Calculate number of spaces per gap
                    space_between_words = num_spaces // (len(current_line) - 1)
                    extra_spaces = num_spaces % (len(current_line) - 1)

                    justified_line = ''
                    for i in range(len(current_line)):
                        justified_line += current_line[i]
                        if i < len(current_line) - 1:  # Do not append extra space after the last word
                            justified_line += ' ' * space_between_words
                            if i < extra_spaces:
                                justified_line += ' '

                    result.append(justified_line)

                # Reset for next line
                current_line = []
                current_length = 0

            # Add word to current line
            current_line.append(word)
            current_length += len(word)

        # Last line (left justified)
        last_line = ' '.join(current_line)
        last_line += ' ' * (maxWidth - len(last_line))
        result.append(last_line)

        return result